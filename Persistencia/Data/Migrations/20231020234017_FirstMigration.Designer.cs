// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Persistencia;

#nullable disable

namespace Persistencia.Data.Migrations
{
    [DbContext(typeof(ApiContext))]
    [Migration("20231020234017_FirstMigration")]
    partial class FirstMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.12")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Dominio.Entities.Cargo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Descripcion")
                        .HasColumnType("longtext");

                    b.Property<int>("SueldoBase")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("cargo", (string)null);
                });

            modelBuilder.Entity("Dominio.Entities.Cliente", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateOnly>("FechaRegistro")
                        .HasMaxLength(30)
                        .HasColumnType("date");

                    b.Property<int>("MunicipioIdFk")
                        .HasColumnType("int");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("TipoPersonaIdFk")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MunicipioIdFk");

                    b.HasIndex("TipoPersonaIdFk");

                    b.ToTable("cliente", (string)null);
                });

            modelBuilder.Entity("Dominio.Entities.Color", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)");

                    b.HasKey("Id");

                    b.ToTable("color", (string)null);
                });

            modelBuilder.Entity("Dominio.Entities.Departamento", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(35)
                        .HasColumnType("varchar(35)");

                    b.Property<int>("PaisIdFk")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PaisIdFk");

                    b.ToTable("departamento", (string)null);
                });

            modelBuilder.Entity("Dominio.Entities.DetalleOrden", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("CantidadProducida")
                        .HasMaxLength(20)
                        .HasColumnType("int");

                    b.Property<int>("CantidadProducir")
                        .HasMaxLength(20)
                        .HasColumnType("int");

                    b.Property<int>("ColorIdFk")
                        .HasColumnType("int");

                    b.Property<int>("EstadoIdFk")
                        .HasColumnType("int");

                    b.Property<int>("OrdenIdFk")
                        .HasColumnType("int");

                    b.Property<int>("PrendaIdFk")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ColorIdFk");

                    b.HasIndex("EstadoIdFk");

                    b.HasIndex("OrdenIdFk");

                    b.HasIndex("PrendaIdFk");

                    b.ToTable("detalleOrden", (string)null);
                });

            modelBuilder.Entity("Dominio.Entities.DetalleVenta", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("Cantidad")
                        .HasMaxLength(30)
                        .HasColumnType("int");

                    b.Property<int>("InventarioIdFk")
                        .HasColumnType("int");

                    b.Property<int>("TallaIdFk")
                        .HasColumnType("int");

                    b.Property<int>("ValorUnitario")
                        .HasMaxLength(30)
                        .HasColumnType("int");

                    b.Property<int>("VentaIdFk")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("InventarioIdFk");

                    b.HasIndex("TallaIdFk");

                    b.HasIndex("VentaIdFk");

                    b.ToTable("detalleVenta", (string)null);
                });

            modelBuilder.Entity("Dominio.Entities.Empleado", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("CargoIdFk")
                        .HasColumnType("int");

                    b.Property<DateOnly>("FechaIngreso")
                        .HasMaxLength(20)
                        .HasColumnType("date");

                    b.Property<int>("MunicipioIdFk")
                        .HasColumnType("int");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)");

                    b.HasKey("Id");

                    b.HasIndex("CargoIdFk");

                    b.HasIndex("MunicipioIdFk");

                    b.ToTable("empleado", (string)null);
                });

            modelBuilder.Entity("Dominio.Entities.Empresa", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateOnly>("FechaCreacion")
                        .HasMaxLength(20)
                        .HasColumnType("date");

                    b.Property<int>("MunicipioIdFk")
                        .HasColumnType("int");

                    b.Property<string>("Nit")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)");

                    b.Property<string>("RazonSocial")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)");

                    b.Property<string>("RepresentanteLegal")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)");

                    b.HasKey("Id");

                    b.HasIndex("MunicipioIdFk");

                    b.ToTable("empresa", (string)null);
                });

            modelBuilder.Entity("Dominio.Entities.Estado", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)");

                    b.Property<int>("TipoEstadoIdFk")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TipoEstadoIdFk");

                    b.ToTable("estado", (string)null);
                });

            modelBuilder.Entity("Dominio.Entities.FormaPago", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)");

                    b.HasKey("Id");

                    b.ToTable("formaPago", (string)null);
                });

            modelBuilder.Entity("Dominio.Entities.Genero", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)");

                    b.HasKey("Id");

                    b.ToTable("genero", (string)null);
                });

            modelBuilder.Entity("Dominio.Entities.Insumo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("varchar(40)");

                    b.Property<int>("StockMax")
                        .HasMaxLength(30)
                        .HasColumnType("int");

                    b.Property<int>("StockMin")
                        .HasMaxLength(30)
                        .HasColumnType("int");

                    b.Property<int>("ValorUnitario")
                        .HasMaxLength(30)
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("insumo", (string)null);
                });

            modelBuilder.Entity("Dominio.Entities.InsumoPrenda", b =>
                {
                    b.Property<int>("PrendaIdFk")
                        .HasColumnType("int");

                    b.Property<int>("InsumoIdFk")
                        .HasColumnType("int");

                    b.Property<int>("Cantidad")
                        .HasColumnType("int");

                    b.HasKey("PrendaIdFk", "InsumoIdFk");

                    b.HasIndex("Cantidad");

                    b.HasIndex("InsumoIdFk");

                    b.ToTable("insumoprenda", (string)null);
                });

            modelBuilder.Entity("Dominio.Entities.InsumoProveedor", b =>
                {
                    b.Property<int>("InsumoIdFk")
                        .HasColumnType("int");

                    b.Property<int>("ProveedorIdFk")
                        .HasColumnType("int");

                    b.HasKey("InsumoIdFk", "ProveedorIdFk");

                    b.HasIndex("ProveedorIdFk");

                    b.ToTable("insumoProveedor", (string)null);
                });

            modelBuilder.Entity("Dominio.Entities.Inventario", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("CodInventario")
                        .HasMaxLength(30)
                        .HasColumnType("int");

                    b.Property<int>("PrendaIdFk")
                        .HasColumnType("int");

                    b.Property<int?>("TallaId")
                        .HasColumnType("int");

                    b.Property<int>("ValorVtaCop")
                        .HasMaxLength(30)
                        .HasColumnType("int");

                    b.Property<int>("ValorVtaUsd")
                        .HasMaxLength(30)
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PrendaIdFk");

                    b.HasIndex("TallaId");

                    b.ToTable("inventario", (string)null);
                });

            modelBuilder.Entity("Dominio.Entities.InventarioTalla", b =>
                {
                    b.Property<int>("TallaIdFk")
                        .HasColumnType("int");

                    b.Property<int>("InventarioIdFk")
                        .HasColumnType("int");

                    b.Property<string>("Cantidad")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)");

                    b.HasKey("TallaIdFk", "InventarioIdFk");

                    b.HasIndex("InventarioIdFk");

                    b.ToTable("inventarioTalla", (string)null);
                });

            modelBuilder.Entity("Dominio.Entities.Municipio", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("DepartamentoIdFk")
                        .HasColumnType("int");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)");

                    b.HasKey("Id");

                    b.HasIndex("DepartamentoIdFk");

                    b.ToTable("municipio", (string)null);
                });

            modelBuilder.Entity("Dominio.Entities.Orden", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("ClienteIdFk")
                        .HasColumnType("int");

                    b.Property<int>("EmpleadoIdFk")
                        .HasColumnType("int");

                    b.Property<int>("EstadoIdFk")
                        .HasColumnType("int");

                    b.Property<DateOnly>("Fecha")
                        .HasMaxLength(30)
                        .HasColumnType("date");

                    b.HasKey("Id");

                    b.HasIndex("ClienteIdFk");

                    b.HasIndex("EmpleadoIdFk");

                    b.HasIndex("EstadoIdFk");

                    b.ToTable("orden", (string)null);
                });

            modelBuilder.Entity("Dominio.Entities.Pais", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)");

                    b.HasKey("Id");

                    b.ToTable("pais", (string)null);
                });

            modelBuilder.Entity("Dominio.Entities.Prenda", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("EstadoIdFk")
                        .HasColumnType("int");

                    b.Property<int>("GeneroIdFk")
                        .HasColumnType("int");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)");

                    b.Property<int>("TipoProteccionIdFk")
                        .HasColumnType("int");

                    b.Property<int>("ValorUnitCop")
                        .HasMaxLength(30)
                        .HasColumnType("int");

                    b.Property<int>("ValorUnitUsd")
                        .HasMaxLength(30)
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EstadoIdFk");

                    b.HasIndex("GeneroIdFk");

                    b.HasIndex("TipoProteccionIdFk");

                    b.ToTable("prenda", (string)null);
                });

            modelBuilder.Entity("Dominio.Entities.Proveedor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("MunicipioIdFk")
                        .HasColumnType("int");

                    b.Property<int>("NitProveedor")
                        .HasMaxLength(30)
                        .HasColumnType("int");

                    b.Property<string>("Nombre")
                        .HasColumnType("longtext");

                    b.Property<int>("TipoPersonaIdFk")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasAlternateKey("NitProveedor");

                    b.HasIndex("MunicipioIdFk");

                    b.HasIndex("TipoPersonaIdFk");

                    b.ToTable("proveedor", (string)null);
                });

            modelBuilder.Entity("Dominio.Entities.RefreshToken", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("Expires")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("IdUsuarioFk")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Revoked")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Token")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("IdUsuarioFk");

                    b.ToTable("RefreshToken");
                });

            modelBuilder.Entity("Dominio.Entities.Rol", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar")
                        .HasColumnName("rolName");

                    b.HasKey("Id");

                    b.ToTable("rol", (string)null);
                });

            modelBuilder.Entity("Dominio.Entities.RolUsuario", b =>
                {
                    b.Property<int>("IdUsuarioFk")
                        .HasColumnType("int");

                    b.Property<int>("IdRolFk")
                        .HasColumnType("int");

                    b.HasKey("IdUsuarioFk", "IdRolFk");

                    b.HasIndex("IdRolFk");

                    b.ToTable("userRol", (string)null);
                });

            modelBuilder.Entity("Dominio.Entities.Talla", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)");

                    b.HasKey("Id");

                    b.ToTable("talla", (string)null);
                });

            modelBuilder.Entity("Dominio.Entities.TipoEstado", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)");

                    b.HasKey("Id");

                    b.ToTable("tipoEstado", (string)null);
                });

            modelBuilder.Entity("Dominio.Entities.TipoPersona", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)");

                    b.HasKey("Id");

                    b.ToTable("tipoPersona", (string)null);
                });

            modelBuilder.Entity("Dominio.Entities.TipoProteccion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)");

                    b.HasKey("Id");

                    b.ToTable("tipoProteccion", (string)null);
                });

            modelBuilder.Entity("Dominio.Entities.Usuario", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("email");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("nombre");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.ToTable("usuario", (string)null);
                });

            modelBuilder.Entity("Dominio.Entities.Venta", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("ClienteIdFk")
                        .HasColumnType("int");

                    b.Property<int>("EmpleadoIdFk")
                        .HasColumnType("int");

                    b.Property<DateOnly>("Fecha")
                        .HasMaxLength(20)
                        .HasColumnType("date");

                    b.Property<int>("FormaPagoIdFk")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ClienteIdFk");

                    b.HasIndex("EmpleadoIdFk");

                    b.HasIndex("FormaPagoIdFk");

                    b.ToTable("venta", (string)null);
                });

            modelBuilder.Entity("Dominio.Entities.Cliente", b =>
                {
                    b.HasOne("Dominio.Entities.Municipio", "Municipio")
                        .WithMany("Clientes")
                        .HasForeignKey("MunicipioIdFk")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Dominio.Entities.TipoPersona", "TipoPersona")
                        .WithMany("Clientes")
                        .HasForeignKey("TipoPersonaIdFk")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Municipio");

                    b.Navigation("TipoPersona");
                });

            modelBuilder.Entity("Dominio.Entities.Departamento", b =>
                {
                    b.HasOne("Dominio.Entities.Pais", "Pais")
                        .WithMany("Departamentos")
                        .HasForeignKey("PaisIdFk")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Pais");
                });

            modelBuilder.Entity("Dominio.Entities.DetalleOrden", b =>
                {
                    b.HasOne("Dominio.Entities.Color", "Color")
                        .WithMany("DetalleOrdenes")
                        .HasForeignKey("ColorIdFk")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Dominio.Entities.Estado", "Estado")
                        .WithMany("DetalleOrdenes")
                        .HasForeignKey("EstadoIdFk")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Dominio.Entities.Orden", "Orden")
                        .WithMany("DetalleOrdenes")
                        .HasForeignKey("OrdenIdFk")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Dominio.Entities.Prenda", "Prenda")
                        .WithMany("DetalleOrdenes")
                        .HasForeignKey("PrendaIdFk")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Color");

                    b.Navigation("Estado");

                    b.Navigation("Orden");

                    b.Navigation("Prenda");
                });

            modelBuilder.Entity("Dominio.Entities.DetalleVenta", b =>
                {
                    b.HasOne("Dominio.Entities.Inventario", "Inventario")
                        .WithMany("DetalleVentas")
                        .HasForeignKey("InventarioIdFk")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Dominio.Entities.Talla", "Talla")
                        .WithMany("DetalleVentas")
                        .HasForeignKey("TallaIdFk")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Dominio.Entities.Venta", "Venta")
                        .WithMany("DetalleVentas")
                        .HasForeignKey("VentaIdFk")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Inventario");

                    b.Navigation("Talla");

                    b.Navigation("Venta");
                });

            modelBuilder.Entity("Dominio.Entities.Empleado", b =>
                {
                    b.HasOne("Dominio.Entities.Cargo", "Cargo")
                        .WithMany("Empleados")
                        .HasForeignKey("CargoIdFk")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Dominio.Entities.Municipio", "Municipio")
                        .WithMany("Empleados")
                        .HasForeignKey("MunicipioIdFk")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cargo");

                    b.Navigation("Municipio");
                });

            modelBuilder.Entity("Dominio.Entities.Empresa", b =>
                {
                    b.HasOne("Dominio.Entities.Municipio", "Municipio")
                        .WithMany("Empresas")
                        .HasForeignKey("MunicipioIdFk")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Municipio");
                });

            modelBuilder.Entity("Dominio.Entities.Estado", b =>
                {
                    b.HasOne("Dominio.Entities.TipoEstado", "TipoEstado")
                        .WithMany("Estados")
                        .HasForeignKey("TipoEstadoIdFk")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TipoEstado");
                });

            modelBuilder.Entity("Dominio.Entities.InsumoPrenda", b =>
                {
                    b.HasOne("Dominio.Entities.Insumo", "Insumo")
                        .WithMany("InsumoPrendas")
                        .HasForeignKey("InsumoIdFk")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Dominio.Entities.Prenda", "Prenda")
                        .WithMany("InsumoPrendas")
                        .HasForeignKey("PrendaIdFk")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Insumo");

                    b.Navigation("Prenda");
                });

            modelBuilder.Entity("Dominio.Entities.InsumoProveedor", b =>
                {
                    b.HasOne("Dominio.Entities.Insumo", "Insumo")
                        .WithMany("InsumoProveedores")
                        .HasForeignKey("InsumoIdFk")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Dominio.Entities.Proveedor", "Proveedor")
                        .WithMany("InsumoProveedores")
                        .HasForeignKey("ProveedorIdFk")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Insumo");

                    b.Navigation("Proveedor");
                });

            modelBuilder.Entity("Dominio.Entities.Inventario", b =>
                {
                    b.HasOne("Dominio.Entities.Prenda", "Prenda")
                        .WithMany("Inventarios")
                        .HasForeignKey("PrendaIdFk")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Dominio.Entities.Talla", null)
                        .WithMany("Inventarios")
                        .HasForeignKey("TallaId");

                    b.Navigation("Prenda");
                });

            modelBuilder.Entity("Dominio.Entities.InventarioTalla", b =>
                {
                    b.HasOne("Dominio.Entities.Inventario", "Inventario")
                        .WithMany("InventarioTallas")
                        .HasForeignKey("InventarioIdFk")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Dominio.Entities.Talla", "Talla")
                        .WithMany("InventarioTallas")
                        .HasForeignKey("TallaIdFk")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Inventario");

                    b.Navigation("Talla");
                });

            modelBuilder.Entity("Dominio.Entities.Municipio", b =>
                {
                    b.HasOne("Dominio.Entities.Departamento", "Departamento")
                        .WithMany("Municipios")
                        .HasForeignKey("DepartamentoIdFk")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Departamento");
                });

            modelBuilder.Entity("Dominio.Entities.Orden", b =>
                {
                    b.HasOne("Dominio.Entities.Cliente", "Cliente")
                        .WithMany("Ordenes")
                        .HasForeignKey("ClienteIdFk")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Dominio.Entities.Empleado", "Empleado")
                        .WithMany("Ordenes")
                        .HasForeignKey("EmpleadoIdFk")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Dominio.Entities.Estado", "Estado")
                        .WithMany("Ordenes")
                        .HasForeignKey("EstadoIdFk")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cliente");

                    b.Navigation("Empleado");

                    b.Navigation("Estado");
                });

            modelBuilder.Entity("Dominio.Entities.Prenda", b =>
                {
                    b.HasOne("Dominio.Entities.Estado", "Estado")
                        .WithMany("Prendas")
                        .HasForeignKey("EstadoIdFk")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Dominio.Entities.Genero", "Genero")
                        .WithMany("Prendas")
                        .HasForeignKey("GeneroIdFk")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Dominio.Entities.TipoProteccion", "TipoProteccion")
                        .WithMany("Prendas")
                        .HasForeignKey("TipoProteccionIdFk")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Estado");

                    b.Navigation("Genero");

                    b.Navigation("TipoProteccion");
                });

            modelBuilder.Entity("Dominio.Entities.Proveedor", b =>
                {
                    b.HasOne("Dominio.Entities.Municipio", "Municipio")
                        .WithMany("Proveedores")
                        .HasForeignKey("MunicipioIdFk")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Dominio.Entities.TipoPersona", "TipoPersona")
                        .WithMany("Proveedores")
                        .HasForeignKey("TipoPersonaIdFk")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Municipio");

                    b.Navigation("TipoPersona");
                });

            modelBuilder.Entity("Dominio.Entities.RefreshToken", b =>
                {
                    b.HasOne("Dominio.Entities.Usuario", "Usuario")
                        .WithMany("RefreshTokens")
                        .HasForeignKey("IdUsuarioFk")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("Dominio.Entities.RolUsuario", b =>
                {
                    b.HasOne("Dominio.Entities.Rol", "Rol")
                        .WithMany("RolUsuarios")
                        .HasForeignKey("IdRolFk")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Dominio.Entities.Usuario", "Usuario")
                        .WithMany("RolUsuarios")
                        .HasForeignKey("IdUsuarioFk")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Rol");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("Dominio.Entities.Venta", b =>
                {
                    b.HasOne("Dominio.Entities.Cliente", "Cliente")
                        .WithMany("Ventas")
                        .HasForeignKey("ClienteIdFk")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Dominio.Entities.Empleado", "Empleado")
                        .WithMany("Ventas")
                        .HasForeignKey("EmpleadoIdFk")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Dominio.Entities.FormaPago", "FormaPago")
                        .WithMany("Ventas")
                        .HasForeignKey("FormaPagoIdFk")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cliente");

                    b.Navigation("Empleado");

                    b.Navigation("FormaPago");
                });

            modelBuilder.Entity("Dominio.Entities.Cargo", b =>
                {
                    b.Navigation("Empleados");
                });

            modelBuilder.Entity("Dominio.Entities.Cliente", b =>
                {
                    b.Navigation("Ordenes");

                    b.Navigation("Ventas");
                });

            modelBuilder.Entity("Dominio.Entities.Color", b =>
                {
                    b.Navigation("DetalleOrdenes");
                });

            modelBuilder.Entity("Dominio.Entities.Departamento", b =>
                {
                    b.Navigation("Municipios");
                });

            modelBuilder.Entity("Dominio.Entities.Empleado", b =>
                {
                    b.Navigation("Ordenes");

                    b.Navigation("Ventas");
                });

            modelBuilder.Entity("Dominio.Entities.Estado", b =>
                {
                    b.Navigation("DetalleOrdenes");

                    b.Navigation("Ordenes");

                    b.Navigation("Prendas");
                });

            modelBuilder.Entity("Dominio.Entities.FormaPago", b =>
                {
                    b.Navigation("Ventas");
                });

            modelBuilder.Entity("Dominio.Entities.Genero", b =>
                {
                    b.Navigation("Prendas");
                });

            modelBuilder.Entity("Dominio.Entities.Insumo", b =>
                {
                    b.Navigation("InsumoPrendas");

                    b.Navigation("InsumoProveedores");
                });

            modelBuilder.Entity("Dominio.Entities.Inventario", b =>
                {
                    b.Navigation("DetalleVentas");

                    b.Navigation("InventarioTallas");
                });

            modelBuilder.Entity("Dominio.Entities.Municipio", b =>
                {
                    b.Navigation("Clientes");

                    b.Navigation("Empleados");

                    b.Navigation("Empresas");

                    b.Navigation("Proveedores");
                });

            modelBuilder.Entity("Dominio.Entities.Orden", b =>
                {
                    b.Navigation("DetalleOrdenes");
                });

            modelBuilder.Entity("Dominio.Entities.Pais", b =>
                {
                    b.Navigation("Departamentos");
                });

            modelBuilder.Entity("Dominio.Entities.Prenda", b =>
                {
                    b.Navigation("DetalleOrdenes");

                    b.Navigation("InsumoPrendas");

                    b.Navigation("Inventarios");
                });

            modelBuilder.Entity("Dominio.Entities.Proveedor", b =>
                {
                    b.Navigation("InsumoProveedores");
                });

            modelBuilder.Entity("Dominio.Entities.Rol", b =>
                {
                    b.Navigation("RolUsuarios");
                });

            modelBuilder.Entity("Dominio.Entities.Talla", b =>
                {
                    b.Navigation("DetalleVentas");

                    b.Navigation("InventarioTallas");

                    b.Navigation("Inventarios");
                });

            modelBuilder.Entity("Dominio.Entities.TipoEstado", b =>
                {
                    b.Navigation("Estados");
                });

            modelBuilder.Entity("Dominio.Entities.TipoPersona", b =>
                {
                    b.Navigation("Clientes");

                    b.Navigation("Proveedores");
                });

            modelBuilder.Entity("Dominio.Entities.TipoProteccion", b =>
                {
                    b.Navigation("Prendas");
                });

            modelBuilder.Entity("Dominio.Entities.Usuario", b =>
                {
                    b.Navigation("RefreshTokens");

                    b.Navigation("RolUsuarios");
                });

            modelBuilder.Entity("Dominio.Entities.Venta", b =>
                {
                    b.Navigation("DetalleVentas");
                });
#pragma warning restore 612, 618
        }
    }
}
